name: Build and Deploy DEV Env

on:
  pull_request:
    types: 
      - opened
      - synchronize  # 当 PR 有新 commit 推送时触发
      - reopened
  # push:
  #   branches:
  #     - main  # 触发条件，可改为你默认分支
  #
env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/flask-demo
  IMAGE_TAG: "pr-${{ github.event.pull_request.number }}"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # 根据需要修改版本

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Code Testing
        uses: cclauss/GitHub-Action-for-pytest@0.5.0

      - name: Run pytest
        run: pytest app.py tests/test_app.py
  
  dev-image-build:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  dev-image-scan:
    runs-on: ubuntu-latest
    needs: [test,dev-image-build]
    steps:
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'json'           # 可选：table / json / sarif
          exit-code: '0'            # 若发现高危漏洞则失败
          output: trivy-report.json # 将结果保存为 json 文件
          vuln-type: 'os,library'   # 扫描类型
          ignore-unfixed: false      # 是否忽略未修复漏洞
      
      - name: Upload Trivy Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-result
          path: trivy-report.json
          retention-days: 1

  dev-deploy:
    runs-on: ubuntu-latest
    needs: [test,dev-image-build,dev-image-scan]

    steps:
      - name: Deploy to remote server
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            docker stop flask-dev || true
            docker rm flask-dev || true
            docker run --rm -d --name flask-dev -p 5000:5000 ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
