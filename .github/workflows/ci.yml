name: Build and Deploy

on:
  pull_request:
    types: 
      - opened
      - synchronize  # 当 PR 有新 commit 推送时触发
  # push:
  #   branches:
  #     - main  # 触发条件，可改为你默认分支

jobs:
  image-build-push:
    runs-on: ubuntu-latest
    outputs:
      pr_tag: ${{ steps.set_image_tag.outputs.PR_TAG }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Image Tag
        id: set_image_tag
        run: |
          echo "PR_TAG=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/flask-demo:${{ steps.set_image_tag.outputs.pr_tag }} .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-demo:${{ steps.set_image_tag.outputs.pr_tag }}

  image-scan:
    runs-on: ubuntu-latest
    needs: image-build-push
    steps:
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/flask-demo:${{ needs.image-build-push.outputs.pr_tag }}
          format: 'json'           # 可选：table / json / sarif
          exit-code: '0'            # 若发现高危漏洞则失败
          output: trivy-report.json # 将结果保存为 json 文件
          vuln-type: 'os,library'   # 扫描类型
          ignore-unfixed: false      # 是否忽略未修复漏洞
      
      - name: Upload Trivy Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-result
          path: trivy-report.json
          retention-days: 1

  docker-deploy:
    runs-on: ubuntu-latest
    needs: [image-build-push,image-scan]

    steps:
      - name: Deploy to remote server
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            docker stop flask-app || true
            docker rm flask-app || true
            docker run --rm -d --name flask-app -p 5000:5000 ${{ secrets.DOCKERHUB_USERNAME }}/flask-demo:${{ needs.image-build-push.outputs.pr_tag }}
